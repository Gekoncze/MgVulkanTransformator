public class VkSimplified extends Vk {
    private final ThreadLocal<VkResult> result = ThreadLocal.withInitial(new java.util.function.Supplier<VkResult>() {
        @Override
        public VkResult get() {
            return new VkResult();
        }
    });

    private final ThreadLocal<VkUInt32> count = ThreadLocal.withInitial(new java.util.function.Supplier<VkUInt32>() {
        @Override
        public VkUInt32 get() {
            return new VkUInt32();
        }
    });

    private VkAllocationCallbacks pAllocator = null;

    public VkAllocationCallbacks getAllocator() {
        return pAllocator;
    }

    public void setAllocator(VkAllocationCallbacks pAllocator) {
        this.pAllocator = pAllocator;
    }

%FUNCTIONS%
}